/* 

// 编译语法
// sass test.scss test.css

// 监听编译语法
// watch a file
//　sass --watch input.scss:output.css
// watch a directory
//sass --watch app/sass:public/stylesheets

*/


//SASS允许使用变量，所有变量以$开头。
$blue :#129999;

$var:100;

div{
	color:$blue;
	background:$blue;
}

$side : left;

//如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。
.rounded {
　　　　border-#{$side}-radius: 5px;
}

//SASS允许在代码中使用算式：
body{
　　　　top: 50px + 100px;
　　　　right: $var * 10%;

}

//SASS允许选择器嵌套
div{
	h1 {
		color:red;
	}
}

//属性也可以嵌套，比如border-color属性，可以写成
p{
	border:{
	color:red;
	}
}

//在嵌套的代码块内，可以使用$引用父元素。比如a:hover伪类，可以写成：
a{
	&:hover{
	color:#ffb3ff;
	}
}

//继承
.class1{
	border: 1px solid #ddd;
	}
//class2要继承class1，就要使用@extend命令
.class2 {
	@extend .class1;
	font-size:120%;
	}

//minxin  Mixin有点像C语言的宏（macro），是可以重用的代码块
  @mixin left { float: left; margin-left: 10px; }

//使用@include命令，调用这个mixin。
  div { @include left; }


  @mixin left($value: 10px) { float: left; margin-right: $value; }

//mixin的强大之处，在于可以指定参数和缺省值。
  div { @include left(20px); }


  //mixin使用实例
  @mixin rounded($vert, $horz, $radius: 10px) { border-#{$vert}-#{$horz}-radius: $radius; -moz-border-radius-#{$vert}#{$horz}: $radius; -webkit-border-#{$vert}-#{$horz}-radius: $radius; }

  //调用
  #navbar li { @include rounded(top, left); } #footer { @include rounded(top, left, 5px); }

  //颜色函数
div{
  color:lighten(#cc3, 10%) ;// #d6d65c 
  color:darken(#cc3, 10%) ;// #a3a329
  color:grayscale(#cc3) ;// #808080 
  color:complement(#cc3); // #33c
}


//!高级语法

// if
p { @if 1 + 1 == 2 { border: 1px solid; } @if 5
< 3 { border: 2px dotted; } }

// if else
p {
@if 1 >
	30% { background-color: #000; } @else { background-color: #fff; }
}

//for 循环
@for $i from 1 to 10 
	{ 
	.border-#{$i} { 
		border: #{$i}px solid blue; } 
	}


//while 循环
$i: 6; @while $i > 0 {
 .item-#{$i} { 
 width: 2em * $i; } 
 $i: $i - 2;
  }


  // 自定义函数
  @function double($n) { @return $n * 2; } 
  #sidebar { width: double(25px); }